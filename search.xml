<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网安dzqz</title>
      <link href="/2025/04/02/%E7%BD%91%E5%AE%89dzqz/"/>
      <url>/2025/04/02/%E7%BD%91%E5%AE%89dzqz/</url>
      
        <content type="html"><![CDATA[<h1 id="网络安全电qz学习部分"><a href="#网络安全电qz学习部分" class="headerlink" title="网络安全电qz学习部分"></a>网络安全电qz学习部分</h1><p>（注：仅用于记录个人学习！！！违者自负责任，不同操作系统之间存在一定差别，操作前请做好防护补救措施，建议查阅相关资料，谨慎操作）</p><h2 id="一、获取用户密码信息"><a href="#一、获取用户密码信息" class="headerlink" title="一、获取用户密码信息"></a>一、获取用户密码信息</h2><p><code>HKEY_LOCAL_MACHINE\SAM</code> 区域存储了用户账户密码的哈希值。</p><p>分别执行下面三个命令获取相关文件和把在注册表里把 <code>lsass.exe</code> 进程转成转储文件（也可以用 <code>procdump</code>）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reg save hklm\sam sam.hive</span><br><span class="line">reg save hklm\system system.hive</span><br><span class="line">reg save hklm\security security.hive</span><br></pre></td></tr></table></figure><p>获取到 <code>sam.hive</code>、<code>system.hive</code> 和 <code>lsass.dmp</code> 等敏感文件。</p><p>然后下载 <code>mimikatz</code>，选择对应操作系统进入目录，把 <code>sam.hive</code>、<code>system.hive</code> 以及 <code>lsass.dmp</code> 转移到 <code>mimikatz</code> 里用于后续分析。用管理员身份运行 <code>mimikatz.exe</code>。</p><p>执行命令先提权：<code>privilege::debug</code>，然后若要破解主机内所有账户密码，需用到的命令是 <code>lsadump::sam /sam:sam.hive /system:system.hive</code>。</p><p>执行后会显示电脑里存在的用户名字和对应的密码哈希，可拿这些哈希值到一些在线网站解密，获得密码。操作需在合法的测试环境内，严禁违法操作。</p><p>注：<code>lsass.exe</code> 在很多机器上应该已经被保护起来，可以上网查阅相关资料（如修改注册表等）进行测试，但会降低电脑安全性。</p><h2 id="二、图片信息获取（可以查资料自学一些磁盘恢复工具）"><a href="#二、图片信息获取（可以查资料自学一些磁盘恢复工具）" class="headerlink" title="二、图片信息获取（可以查资料自学一些磁盘恢复工具）"></a>二、图片信息获取（可以查资料自学一些磁盘恢复工具）</h2><p>分享两个在 <code>kali linux</code> 里特别好用的命令：</p><ol><li><code>binwalk /xx/xx/xx.jpg</code> ，可能发现除图片本身外的其他文件信息。</li><li><code>foremost -i xxx.jpg</code> ，可分离文件信息，应该会自动生成到和图片同一路径下的文件夹。</li></ol><p>用 <code>winhex</code> 打开生成的文件或相关文件夹，可能发现有用信息。 </p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dzqz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术</title>
      <link href="/2025/04/01/%E6%8A%80%E6%9C%AF/"/>
      <url>/2025/04/01/%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="网安学习"><a href="#网安学习" class="headerlink" title="网安学习"></a>网安学习</h1><p>1.Web 中间件及漏洞：Web 服务器存在路径遍历等漏洞；应用服务器（如 Tomcat、JBoss ）有反序列化等漏洞；脚本语言解释器易出现代码注入漏洞；数据库面临 SQL 注入等风险；Web 服务器插件存在表达式注入漏洞；缓存组件（如 Memcached、Redis ）有未授权访问漏洞；前端组件可能引发 XSS 漏洞；负载均衡（如 Nginx、HAProxy ）会出现路径遍历等问题。<br>2.网络攻击防御设备：防火墙用于检测和过滤恶意流量、实现访问控制；入侵检测系统基于签名或行为检测入侵；入侵防御系统能主动阻断攻击；网络沙箱在隔离环境分析可疑文件和进程；Web 应用防火墙保护 Web 应用免受 OWASP Top10 等威胁；负载均衡可避免单点故障；互联网访问管理控制访问互联网权限；数据外泄防护系统防止机密数据非法传输；蜜罐通过诱饵获取攻击者信息；日志分析系统关联分析日志检测攻击；邮件 &#x2F; Web 网关过滤垃圾信息和木马病毒；数据库审核监控数据库活动检测 SQL 注入等。<br>3.Windows 提权方法：利用 Windows 内核漏洞（如 MS15 - 051、MS17 - 010 ）；借助服务漏洞提权；利用软件漏洞；通过注册表切换用户；进行密码 hashes 拦截提权；修改注册表提权；利用内置管理员帐户；通过 Windows 子系统；利用永恒之蓝（MS17 - 010 漏洞 ）远程提权；基于令牌的提权（如 RottenPotato、JuicyPotato ）；搜索明文密码提权；利用密码信任关系（如 Golden Ticket、Silver Ticket 注入 ）；通过任务调度（如 scheduled tasks&#x2F;jobs 添加任务 ）提权。<br>4.文件上传检测与绕过方式：文件上传检测分前端和后端。前端用 JavaScript 和 HTML5 检查文件大小、类型、文件名等；后端通过服务端代码校验文件名、扩展名、文件头，限制上传目录和数量。绕过方式有修改图片文件头、利用双扩展名、URL 编码、使用异常扩展名、内容类型攻击、突破大小限制、路径截断、利用解析漏洞、利用临时文件、内容过滤绕过等。<br>5.信息收集流程与工具：信息收集流程包括确定侦察目标，进行 DNS 枚举（用 nslookup、dig 等工具 ）、子域名枚举、IP 地址信息收集、端口扫描、服务枚举（利用 Nmap、wappalyzer ）、漏洞分析和敏感信息泄露扫描，最后汇总信息。常用工具如 Nmap 用于端口扫描和服务 &#x2F; 操作系统检测；netcat 用于端口扫描和数据传输；Wireshark 用于网络数据包捕获和分析；FOCA 收集公开信息；theHarvester 收集开源信息；DNSdumpster 查找子域名等。<br>6.SQL 注入类型与特点：SQL 注入类型有错误型（基于 SQL 语句错误反馈 ）、联合查询（用 UNION 连接多条查询语句获取额外数据 ）、布尔盲注（根据页面返回判断条件真假 ）、时间盲注（依据数据库响应时间差异判断 ）、报错注入（利用数据库报错回显信息 ）、插入注入（插入后门用户或提取数据 ）、二次注入（发生在登录、搜索等功能中 ）、函数调用（调用数据库函数 ）、宽字节注入（用宽字节编码绕过黑名单 ）、堆查询（同时执行多条语句 ）。<br>7.无线网络安全保护措施：加密和认证方面，使用 WPA2 等强加密方式，设置复杂预共享密钥或采用 RADIUS 认证系统；SSID 隐藏和隔离，不广播 SSID，隔离用户与内部网络；更改默认配置，修改默认管理员密码和 SSID，禁用不必要协议和服务；限制 MAC 地址，仅允许已知设备访问；关闭不使用的无线接口；频繁更新路由器固件；开启日志审计，分析异常访问；设置防火墙策略，过滤无线网络流量；采用 WPA3 等新标准。<br>8.Websocket 连接及安全问题：Websocket 是一种网络通信协议，基于 TCP 协议，与 HTTP 兼容，数据格式轻量，可实现浏览器与服务器全双工双向通信，用于实时应用等场景。其安全问题有拒绝服务攻击、协议攻击、跨站脚本（客户端 JavaScript 代码存在 XSS 漏洞 ）、网络钓鱼、缺乏加密、认证问题信息泄露、缓冲区溢出。<br>9.攻击溯源与应急响应：攻击溯源方法有分析日志、回溯路由（跟踪网络路径 ）、IP 侦察、钓鱼邮件源头追踪、欺骗交互、流量回放、地区定位、特征关联、攻击相似性对比、情报分析（融合内外威胁情报 ）、对比行为模式等。应急响应流程包括检测入侵、首次评估与隔离、证据收集与保全、渗透路径分析、漏洞与风险评估、系统修复与漏洞修补、恢复业务与监控、事后分析总结。<br>10.社会工程学攻击与防范：社会工程学攻击技巧有预文本攻击（先提供正确信息获取信任 ）、尾随入侵、恶意 USB 掉落等。防范措施包括培训员工识别钓鱼邮件能力；使用证书或 DKIM 等 email 验证机制；部署反垃圾和反钓鱼邮件网关；检测邮件内容和链接；启用邮件免责声明；隔离含可执行附件邮件；限制个人邮箱发送敏感信息；建立严格邮件安全策略；采用技术与人工结合方式；使用沙箱检测可疑附件。<br>11.域渗透相关知识：域渗透入口包括盗用域用户凭证、密码喷洒、利用 Protocol 协议漏洞、VPN 和远程访问漏洞、服务端漏洞利用、Token 盗取与伪造、内网连接、第三方应用接入、密钥接管攻击等。获取域控权限方法有密码喷洒攻击、PASS - THE - HASH 攻击、Kerberoasting 攻击、从域管理员工作站入手、利用 MS14 - 068 漏洞、Zerologon 攻击、基于密码的攻击、DCShadow 攻击、SID Hijacking、DCSync 攻击等。域内持久化控制方法有使用 Golden Ticket、Mimikatz DCSync、植入后门、创建永不过期用户、修改域策略、保存密码哈希、添加 Shadow 管理员、DCShadow 注册恶意域控制器、注册恶意 SPN、推送恶意 GPO、注册恶意服务等。<br>12.Windows 与 Linux 系统安全：Windows 系统入侵排查思路包括检查系统重要文件、进程及启动项、账户信息、网络连接、系统日志；利用反病毒软件扫描；检查是否存在 Rootkit；验证系统文件签名；监视关键端口和服务连接；解读注册表；查看计划任务；进行系统还原并检查还原点；分析内存镜像。Windows 系统后门持久化方法有添加新管理员账户、更改注册表、修改启动项、修改服务、嵌入 DLL、利用注册表 autorun 键、组策略、定时任务计划、修改 shortcut 权限、更改文件关联、写入 SAM 数据库、利用 WMI 等。Linux 系统提权方法有利用系统漏洞、软件漏洞、配置文件权限、变量路径（如 LD_PRELOAD ）、cron 定时任务、错误的文件系统权限、明文密码、密码复用、NFS 根目录挂载、环境变量路径、影子文件、容器逃逸、sudo 规则不当配置、个人 SUID&#x2F;GUID 程序等。Linux 系统木马后门持久化方式有 crontab 定时任务、修改系统服务配置、在 rc.local 或 rc.d 脚本添加启动项、在用户登录脚本加入后门、在 init 启动目录添加后门程序、设置动态链接库路径、添加 ssh 公钥、隐藏在系统二进制程序中、编译内核模块 Rootkit、利用 chroot 环境逃逸等。<br>13.HTTP 相关知识：HTTP 通信过程是客户端向服务器 80 端口发起 TCP 连接请求，建立连接后发送请求报文（包含请求方法、资源路径、协议版本等 ），服务器接收请求生成响应报文（包含状态码、响应头、响应正文 ）返回给客户端，通信结束后服务器主动关闭连接，客户端被动关闭，客户端解析响应报文。GET 请求和 POST 请求都基于 TCP 协议，都可传递数据、使用请求头传递参数、进行重定向跳转、在浏览器前进后退。区别在于 GET 参数暴露在 URL 上，有数据长度限制，用于请求数据，会被浏览器缓存，参数保留在历史记录中，安全性低；POST 参数放在请求体中，无数据长度限制，可修改服务器资源，不会被缓存，参数不保留，安全性高。常见 HTTP 状态码中，1xx 表示请求已接收需继续处理；2xx 表示请求成功；3xx 表示需附加操作完成请求；4xx 表示客户端错误；5xx 表示服务器错误，常用的如 200（访问成功 ）、301（永久重定向 ）、404（页面不存在 ）、403（禁止访问 ）、500（服务器内部错误 ） 。<br>14.XXE 漏洞原理是 XML 支持定义外部实体，攻击者可提交自定义 XML 文档，XML 解析器在解析时会载入外部实体，若外部实体指向敏感文件或内网端口，会导致敏感信息泄露或内网端口访问，可进行文件读取、SSRF、DoS 攻击。SSRF 漏洞是服务端误信用户输入的目标地址，可用于访问内网系统、执行未授权命令、端口扫描等。两者在漏洞类型、依赖条件、触发机制、攻击效果、防御重点等方面存在区别。Redis 未授权漏洞修复方法有绑定本地登录地址、网络隔离、账号权限控制、扩展认证机制、TLS 加密传输等。<br>15.SSRF（服务器端请求伪造）是一种危险的安全漏洞，利用方式丰富多样，在信息收集方面可对内网进行端口扫描、指纹识别和本地文件读取；内网扫描时能通过多种手段获取存活主机及端口信息；还可攻击内网的 redis、memcache 等服务以及 web 服务；也能构造请求突破限制，或结合其他漏洞进行攻击。支持的协议众多，file 协议可读取文件，但可能受服务器配置限制；dict 协议能泄露版本信息、探测端口和操作服务；gopher 协议功能强大，支持多种请求方式和二次解码，可用于复杂攻击；http&#x2F;https 协议用于探测内网服务；php 还支持<code>php://</code>等协议，ftp&#x2F;ftps、imap&#x2F;imaps 等协议也各有其特定的利用场景，可用于匿名访问、爆破等操作 。<br>16.XSS（跨站脚本）是一种因 Web 应用对用户输入过滤不严，致使攻击者能将恶意脚本注入网页的安全漏洞。当用户访问被注入脚本的网页时，恶意脚本会在其浏览器中执行，实现窃取信息、篡改页面等目的。XSS 主要分为三类：反射型 XSS，攻击者将恶意脚本附在 URL 参数中，诱使用户点击链接，服务器反射参数内容到响应页面触发脚本执行；存储型 XSS，攻击者把恶意脚本存于服务器存储介质，用户访问相关页面时自动执行，危害较大；DOM - Based XSS，在客户端通过修改 DOM 结构注入恶意脚本，利用客户端 JavaScript 代码对数据验证和过滤不足的漏洞，不依赖服务器端响应。<br>17.Shiro漏洞类型 : <strong>反序列化漏洞</strong>：Shiro在处理某些功能时，对用户输入数据的反序列化操作缺乏严格的安全控制。攻击者可构造恶意的序列化数据，利用Java反序列化机制执行任意代码，进而获取服务器权限。权限绕过漏洞：在权限验证过程中，Shiro的权限控制逻辑可能存在缺陷。例如，通过精心构造请求头或特定的身份认证信息，攻击者能够绕过Shiro的权限检查，访问未授权的资源或执行超出权限的操作，破坏系统的访问控制策略。<br>18.横向渗透命令执行手段：利用系统漏洞<strong>：像MS17 - 010（永恒之蓝）漏洞，通过发送特制的网络数据包，利用Windows系统SMB服务的漏洞，在目标主机上执行任意命令，进而控制目标主机，实现横向移动和权限提升。利用软件漏洞</strong>：若内网中存在软件（如某些数据库软件、中间件）的漏洞，可利用这些漏洞进行命令执行。比如，通过MySQL的UDF（用户自定义函数）漏洞，在具备相应权限的情况下，上传恶意的UDF文件，创建并调用恶意函数来执行系统命令。WMI和PowerShell脚本利用：借助Windows管理规范（WMI），使用特定的命令或脚本来远程执行命令，实现对其他主机的控制。PowerShell脚本也可用于在目标主机上执行各种操作，通过编写恶意脚本，可实现信息收集、文件操作、权限提升等功能，在内部网络中进一步渗透。<br>19. WebLogic权限绕过：弱口令与默认账号利用<strong>：很多WebLogic部署时使用默认账号密码或设置简单弱口令。攻击者可通过尝试这些默认或弱口令登录WebLogic控制台，进而获取管理权限，对WebLogic服务器进行配置更改、部署恶意应用等操作。漏洞利用</strong>：WebLogic存在诸多漏洞，如CVE - 2017 - 10271。利用这些漏洞构造恶意请求，绕过权限验证机制，在WebLogic服务器上执行任意代码，获取服务器权限，突破权限限制访问敏感资源。<br>20. <strong>Redis利用方式</strong> ：未授权访问利用：若Redis服务未设置访问密码，攻击者可直接连接Redis服务器。利用Redis的命令，如SET、GET等，读取、修改或删除数据。还能通过配置文件写入后门，例如修改Redis配置，将数据写入特定文件，如<code>/etc/crontab</code>添加定时任务，实现对服务器的持久控制。利用漏洞执行命令：Redis在特定版本存在漏洞，可利用这些漏洞在服务器上执行系统命令。通过构造特殊的Redis命令，利用漏洞将恶意代码写入服务器文件系统，进而执行恶意代码获取服务器权限。<br>21. 绕CDN思路：子域名探测：利用工具或手动进行子域名暴力枚举，部分子域名可能未接入CDN。通过查询子域名对应的IP地址，若与主域名不同且不是CDN的IP段，就可能找到源站IP，从而绕过CDN访问源站。历史DNS记录查询：借助历史DNS查询工具，获取域名在不同时间段的DNS解析记录。有些历史记录可能包含未使用CDN时的源站IP，利用这些信息可绕过当前的CDN防护，直接访问源站。利用搜索引擎语法<strong>：使用特定的搜索引擎语法，如在Shodan、FOFA等搜索引擎中，通过设置合适的搜索条件，搜索与目标域名相关的IP信息。若搜索到的IP不属于CDN范围，可能就是源站IP，以此绕过CDN。<br>22. 绕过WAF（Web应用防火墙）思路：利用WAF规则缺陷：分析WAF的规则，寻找其对某些特殊字符组合、编码方式或请求头设置的处理漏洞。例如，使用特殊的编码（如双URL编码）绕过WAF对攻击载荷的检测，使恶意请求能够通过WAF到达后端服务器。利用文件上传漏洞绕过：对于WAF防护的文件上传功能，若存在文件上传漏洞，可尝试上传包含恶意代码的文件（如图片马）。通过修改文件头、扩展名等方式绕过WAF的文件类型检测，上传成功后访问文件执行恶意代码，绕过WAF的防护。利用HTTP参数污染（HPP）</strong>：在HTTP请求中，通过多次重复参数或特殊的参数组合方式，使WAF对请求的检测出现混乱。WAF可能无法正确识别真正的攻击参数，导致恶意请求绕过检测到达服务器，进而执行攻击操作。**<br>23. 内网入侵思路：信息收集：利用Nmap、Masscan等工具扫描内网网段，获取存活主机、开放端口和运行服务信息。通过LDAP查询、DNS记录枚举、ARP扫描等技术，收集内网主机名、IP地址、共享资源等信息，寻找潜在的攻击入口。权限获取与提升：利用已知漏洞（如系统漏洞、软件漏洞）获取初始权限，之后通过提权操作（如利用内核漏洞、服务权限配置错误）提升权限，获取系统管理员或域管理员权限，便于进一步控制内网。横向移动<strong>：借助已获取权限的主机，利用WMI、SMB等协议进行横向移动。通过传递哈希值（如PASS - THE - HASH攻击）、利用信任关系等方式，获取其他主机的权限，扩大攻击范围，控制更多内网资源。</strong><br>24. PHP反序列化原理:PHP中的对象可以被序列化为字符串存储或传输，在需要时再反序列化为对象。当应用程序对用户可控的序列化数据进行反序列化操作，且未对数据来源进行严格校验时，就可能出现反序列化漏洞。攻击者构造包含恶意类和方法调用的序列化数据，当应用程序对其进行反序列化时，会触发恶意类的<code>__destruct</code>、<code>__wakeup</code>等魔术方法执行，从而实现任意代码执行、文件操作、数据库查询篡改等恶意操作。<br>25. <strong>内网流量外带思路</strong>:DNS隧道技术<strong>：将内网数据封装在DNS请求中，利用DNS协议进行传输。通过在本地搭建DNS服务器，配置相关规则，将内网数据编码为DNS请求的子域名部分发送出去，在外部接收DNS请求并解析出数据，实现内网数据的外带。HTTP&#x2F;HTTPS隧道：利用内网可访问的Web服务器，将内网数据封装在HTTP&#x2F;HTTPS请求中。攻击者在公网搭建接收服务器，通过构造特殊的请求，将内网数据发送到公网服务器，突破内网限制实现数据外带。</strong><br>26. 检测SQL注入漏洞方法： 手工测试：在输入框、URL参数等位置输入特殊字符（如单引号<code>&#39;</code>、分号<code>;</code>等），观察页面返回结果。若页面出现SQL错误提示、异常的空白页面或返回数据异常，可能存在SQL注入漏洞。工具扫描：使用专业的漏洞扫描工具（如Burp Suite、SQLMap等）。这些工具会自动发送各种测试载荷，检测目标应用程序是否存在SQL注入漏洞，并根据返回结果进行分析判断，输出详细的漏洞报告。 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/01/hello-world/"/>
      <url>/2025/04/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
